import logging

from aiogram import html, F, Router
from aiogram.utils.keyboard import ReplyKeyboardBuilder, KeyboardButton, InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, PhotoSize, BufferedInputFile, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.formatting import as_list, as_marked_section, Bold
from aiogram.utils.markdown import hide_link

from dependency_injector.wiring import Provide, inject
from sqlalchemy.exc import SQLAlchemyError, IntegrityError, NoResultFound
from sqlalchemy.ext.asyncio import AsyncSession

from src.repository.repository import AdminRepository
from .middleware import IsAdminMiddleware
from ..config import Container

router = Router()
router.message.middleware(IsAdminMiddleware())


@router.message(F.text.lower() == '–æ—Ç–º–µ–Ω–∞')
async def cancel_current_operation_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ.')


# HELPME COMMAND

@router.message(Command("helpme"))
async def add_origin_command(message: Message):
    '''–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω—É –∫–æ–º–∞–Ω–¥'''

    await message.answer(
        "/add_studio NAME - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–∏–∏ –æ–∑–≤—É—á–∫–∏\n"
        "/add_origin - –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫\n"
        "/add_season - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω\n"
        "/add_dubbed_season - –¥–æ–±–∞–≤–∏—Ç—å –æ–∑–≤—É—á–∫–∏ –¥–ª—è —Å–µ–∑–æ–Ω–∞\n"
        "/update_status - –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ–∑–æ–Ω–∞\n"
        "/origins - —Å–ø–∏—Å–æ–∫ —Å –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏\n"
        "/studios - —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–∏–π –æ–∑–≤—É—á–∫–∏\n"
        "–æ—Ç–º–µ–Ω–∞ - –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"
    )


# ADD STUDIO COMMAND

@router.message(Command('add_studio'))
@inject
async def add_studio_command_handler(
    message: Message, 
    command: CommandObject, 
    state: FSMContext,
    admin_repo: AdminRepository = Provide[Container.admin_repository]
) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏ –æ–∑–≤—É—á–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Studio
    """
    await state.clear()

    admin_repo.add_studio(command.args)
    try:
        await admin_repo.commit()
        await message.answer('–°—Ç—É–¥–∏—è –æ–∑–≤—É—á–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    except SQLAlchemyError as e:
        await message.answer(f'–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.\n {e}')



## ADD ORIGIN COMMAND FLOW


class AddOrigin(StatesGroup):
    adding_title_ru = State()
    adding_title_en = State()
    approve_result = State()


@router.message(Command("add_origin"))
async def add_origin_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º?",)
    await state.set_state(AddOrigin.adding_title_ru)


@router.message(AddOrigin.adding_title_ru)
async def title_ru_added(message: Message, state: FSMContext):
    await state.update_data(title_ru=message.text)
    await message.answer("–ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",)
    await state.set_state(AddOrigin.adding_title_en)


@router.message(AddOrigin.adding_title_en)
async def title_en_added(message: Message, state: FSMContext):
    await state.update_data(title_en=message.text)
    origin = await state.get_data()

    await message.answer(
        text=f"–ù–∞–∑–≤–∞–Ω–∏–µ[üá∑üá∫]: {origin['title_ru']}\n"
             f"–ù–∞–∑–≤–∞–Ω–∏–µ[üá∫üá∏]: {origin['title_en']}\n"
             f"–î–æ–±–∞–≤–ª—è—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? [–î–∞, –æ—Ç–º–µ–Ω–∞]",
    )
    await state.set_state(AddOrigin.approve_result)


@router.message(AddOrigin.approve_result, F.text.lower() == '–¥–∞')
@inject
async def approve_result(
    message: Message,
    state: FSMContext,
    admin_repo: AdminRepository = Provide[Container.admin_repository]
):
    origin = await state.get_data()
    admin_repo.add_origin(origin['title_ru'], origin['title_en'])
    try:
        await admin_repo.commit()
        await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ')
    except SQLAlchemyError:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö')
    await state.clear()


## ADD SEASON COMMAND flow


class AddSeason(StatesGroup):
    enter_origin_name = State()
    adding_title_ru = State()
    adding_title_en = State()
    season_status = State()
    cover = State()
    approve_result = State()


@router.message(Command("add_season"))
async def add_season_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∞ (/origins –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)",)
    await state.set_state(AddSeason.enter_origin_name)


@router.message(AddSeason.enter_origin_name)
async def enter_origin_name(message: Message, state: FSMContext):
    await state.update_data(origin_name=message.text)
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º?")
    await state.set_state(AddSeason.adding_title_ru)


@router.message(AddSeason.adding_title_ru)
async def title_ru_added(message: Message, state: FSMContext):
    await state.update_data(title_ru=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",)
    await state.set_state(AddSeason.adding_title_en)


@router.message(AddSeason.adding_title_en)
async def title_en_added(message: Message, state: FSMContext):
    await state.update_data(title_en=message.text)
    await message.answer("–í –∫–∞–∫–æ–º —Å—Ç–∞—Ç—É—Å–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–µ–∑–æ–Ω?\n–í–∞—Ä–∏–∞–Ω—Ç—ã: announced, ongoing, released",)
    await state.set_state(AddSeason.season_status)


@router.message(AddSeason.season_status)
async def season_status_added(message: Message, state: FSMContext):
    await state.update_data(season_status=message.text.lower())
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–ª–æ–∂–∫—É —Å–µ–∑–æ–Ω–∞",)
    await state.set_state(AddSeason.cover)


@router.message(AddSeason.cover)
async def season_cover_added(message: Message, state: FSMContext):
    photo = message.text
    await state.update_data(photo=photo)
    season = await state.get_data()
    await message.answer(
        text=f"<b>–ü–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫:</b> {season['origin_name']}\n"
             f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ[RU]:</b> {season['title_ru']}\n"
             f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ[EN]:</b> {season['title_en']}\n"
             f"<b>–°—Ç–∞—Ç—É—Å:</b> {season['season_status']}\n"
             f"{hide_link(season['photo'])}\n"
             f"<b>–î–æ–±–∞–≤–ª—è—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? [–î–∞, –æ—Ç–º–µ–Ω–∞]</b>",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(AddSeason.approve_result)


@router.message(AddSeason.approve_result, F.text.lower() == '–¥–∞')
@inject
async def approve_result(
    message: Message,
    state: FSMContext,
    admin_repo: AdminRepository = Provide[Container.admin_repository],
):
    message.chat.i
    anime = await state.get_data()
    try:
        origin = await admin_repo.get_origin_by_name(anime['origin_name'])
        admin_repo.add_season(
            origin_id=origin.id,
            title_ru=anime['title_ru'],
            title_en=anime['title_en'],
            cover=anime['photo'],
            status=anime['season_status'],
        )
        await admin_repo.commit()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ")
    except SQLAlchemyError:
            await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö')
    await state.clear()


# ADD DUBBED SEASON COMMAND FLOW


class AddDubbedSeason(StatesGroup):
    season_name = State()
    studio = State()


@router.message(Command("add_dubbed_season"))
async def add_dubbed_season_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ –∞–Ω–∏–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",)
    await state.set_state(AddDubbedSeason.season_name)


@router.message(AddDubbedSeason.season_name)
async def got_season_name(message: Message, state: FSMContext):
    await state.update_data(season_name=message.text)
    await message.answer(text="–°—Ç—É–¥–∏–∏ –æ–∑–≤—É—á–∫–∏, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n"
                              "AniLibria, JAM CLUB, SHIZA Project, AnimeVost, –°—É–±—Ç–∏—Ç—Ä—ã, "
                              "–°—Ç—É–¥–∏–π–Ω–∞—è –ë–∞–Ω–¥–∞, Dream Cast, AniDUB, AniRise, #subscribe_on_first")
    await state.set_state(AddDubbedSeason.studio)


@router.message(AddDubbedSeason.studio)
@inject
async def create_dubbed_seasons(
    message: Message,
    state: FSMContext,
    admin_repo: AdminRepository = Provide[Container.admin_repository],
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—É–¥–∏–∏ –æ–∑–≤—É—á–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ —Å–æ–∑–¥–∞–µ—Ç DubbedSeason —Å –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö
    """

    data = await state.get_data()
    studios = message.text.strip().split('\n')

    try:
        season = await admin_repo.get_season_by_name(data['season_name'])
        for studio in studios:
            admin_repo.add_dubbed_season(season.id, season.title_ru, studio)
    
        await admin_repo.commit()
        await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ')
    except IntegrityError:
        await message.answer('–û—à–∏–±–∫–∞. –û–¥–Ω–æ–π –∏–∑ —Å—Ç—É–¥–∏–π –æ–∑–≤—É—á–∫–∏ –Ω–µ—Ç –≤ –±–¥, –ª–∏–±–æ —Å–µ–∑–æ–Ω —Å —Ç–∞–∫–æ–π –æ–∑–≤—É—á–∫–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    except NoResultFound:
        await message.answer('–û—à–∏–±–∫–∞. –°–µ–∑–æ–Ω–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

    await state.clear()


class UpdateSeasonStatus(StatesGroup):
    enter_season_name = State()
    update_status = State()
    approve_result = State()


@router.message(Command("update_status"))
async def update_status_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º?",)
    await state.set_state(UpdateSeasonStatus.enter_season_name)


@router.message(UpdateSeasonStatus.enter_season_name)
async def title_ru_entered(message: Message, state: FSMContext):
    await state.update_data(season_name=message.text)
    await message.answer("–°—Ç–∞—Ç—É—Å —Å–µ–∑–æ–Ω–∞? announced, ongoing, released",)
    await state.set_state(UpdateSeasonStatus.update_status)


@router.message(UpdateSeasonStatus.update_status)
@inject
async def update_season_status(
    message: Message,
    state: FSMContext,
    admin_repo: AdminRepository = Provide[Container.admin_repository]
):
    data = await state.get_data()
    try:
        await admin_repo.update_season_status(season_name=data['season_name'], status=message.text.lower())
        await message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ",)
    except SQLAlchemyError:
        await message.answer('–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ')
    await state.clear()


# DB query commands [Origin]


@router.message(Command('origins'))
@inject
async def get_all_origins_handler(
    message: Message, 
    state: FSMContext,
    admin_repo: AdminRepository = Provide[Container.admin_repository],
):
    await state.clear()

    origins = ['{} ({})'.format(o.title_ru, o.title_en) 
               for o in await admin_repo.origin_list()]
    content = as_marked_section(Bold("–°–ø–∏—Å–æ–∫ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:"), *origins, marker="‚ñ´Ô∏è ")
    await message.answer(**content.as_kwargs())


@router.message(Command('studios'))
@inject
async def get_all_studios_handler(
    message: Message,
    state: FSMContext,
    admin_repo: AdminRepository = Provide[Container.admin_repository],
):
    await state.clear()

    studios = [o.name for o in await admin_repo.studios_list()]
    content = as_marked_section(Bold("–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–∏–π –æ–∑–≤—É—á–∫–∏:"), *studios, marker="‚ñ´Ô∏è ")
    await message.answer(**content.as_kwargs())
