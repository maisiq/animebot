import logging

from aiogram import html, F, Router
from aiogram.utils.keyboard import ReplyKeyboardBuilder, KeyboardButton, InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, PhotoSize, BufferedInputFile, CallbackQuery, URLInputFile
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.formatting import as_list, as_marked_section, Bold
from aiogram.utils.markdown import hide_link

from dependency_injector.wiring import Provide, inject, Closing
from sqlalchemy.exc import SQLAlchemyError

from repository.orm_models import DubbedSeason
from src.repository.repository import UsersRepository, AnimeRepository
from .middleware import IsUserExistsMiddleware
from ..config import bot, Container

router = Router()
# router.message.middleware(IsUserExistsMiddleware())

# START COMMAND


@router.message(CommandStart())
@inject
async def command_start_handler(
    message: Message,
    state: FSMContext,
    user_repo: UsersRepository = Provide[Container.user_repository],
) -> None:
    await state.clear()

    kb = [
        [KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–∏–º–µ")],
        [KeyboardButton(text="–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"), KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]
    ]

    # –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥, –µ—Å–ª–∏ –æ–Ω –∑–∞—à–µ–ª –≤–ø–µ—Ä–≤—ã–µ
    user = await user_repo.get_user_by_id(message.chat.id)
    if user is None:
        user_repo.add(message.chat.id)
        await user_repo.commit()
        logging.info('–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
        "–£–∑–Ω–∞–≤–∞–π –ø–µ—Ä–≤—ã–º –æ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ –∞–Ω–∏–º–µ –≤ –ª—é–±–∏–º–æ–π –æ–∑–≤—É—á–∫–µ! "
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –∏ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üòâ", 
        reply_markup=ReplyKeyboardBuilder(kb).as_markup(resize_keyboard=True, 
                                                        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é")
    )


# USER SUBSCRIPTIONS


@router.message(F.text.lower() == '–º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏')
@inject
async def any_message_handler(
    message: Message, 
    state: FSMContext,
    user_repository: UsersRepository = Provide[Container.user_repository],
) -> None:
    await state.clear()

    user = await user_repository.get_user_by_id(message.chat.id)

    if user:
        subscriptions = user.animelist
    else:
        subscriptions = list()

    seasons = [
        f'[–í—ã—Ö–æ–¥ —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π] {sub.season_name}' if sub.studio_name == '#subscribe_on_first'
        else  f'[{sub.studio_name}] {sub.season_name}'
        for sub in subscriptions
    ]
    if seasons:
        answer = as_marked_section('–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', *seasons, marker='‚ñ´Ô∏è ')
        await message.answer(**answer.as_kwargs())
    else:
        await message.answer('–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—É—Å—Ç')


# UNSUBSCRIBE

# def create_subscribed_season_button(sub: DubbedSeason):
#     if sub.studio_name == '#subscribe_on_first':
#         return [InlineKeyboardButton(text=f'[–í—ã—Ö–æ–¥ —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π] {sub.season_name}', callback_data=str(sub.id))]
#     return [InlineKeyboardButton(text=f'[{sub.studio_name}] {sub.season_name}', callback_data=str(sub.id))]

def create_subscribed_season_buttons(subscriptions: list[DubbedSeason]) -> list[InlineKeyboardButton]:
    buttons = []

    for sub in subscriptions:
        if sub.studio_name == '#subscribe_on_first':
            buttons.append(
                [InlineKeyboardButton(text=f'[–í—ã—Ö–æ–¥ —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π] {sub.season_name}',callback_data=str(sub.id))]
            )
        else:
            buttons.append(
                [InlineKeyboardButton(text=f'[{sub.studio_name}] {sub.season_name}', callback_data=str(sub.id))]
            )

    if len(buttons) > 5:
        buttons += [[InlineKeyboardButton(text='‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö', callback_data='#unsubscribe_all')]]
    return buttons


class Unsubscribe(StatesGroup):
    unsubcribe = State()


@router.message(F.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
@inject
async def any_message_handler(
    message: Message,
    state: FSMContext,
    user_repo: UsersRepository = Provide[Container.user_repository],
) -> None:
    await state.clear()

    user = await user_repo.get_user_by_id(message.chat.id)
    if user:
        subscriptions = user.animelist
    else:
        subscriptions = list()

    buttons = create_subscribed_season_buttons(subscriptions)
    builder = InlineKeyboardBuilder(buttons)

    if buttons:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:', reply_markup=builder.as_markup())
    else:
        await message.answer('–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—É—Å—Ç')
    await state.set_state(Unsubscribe.unsubcribe)


@router.callback_query(Unsubscribe.unsubcribe)
@inject
async def unsubscribe_season_handler(
    callback: CallbackQuery, 
    anime_repo: AnimeRepository = Provide[Container.anime_repository],
    user_repo: UsersRepository = Provide[Container.user_repository]
) -> None:
    user = await user_repo.get_user_by_id(callback.message.chat.id)

    if callback.data == '#unsubscribe_all':
        user.unsubscribe_all()
    else:
        season = await anime_repo.get_dubbed_season_by_id(int(callback.data))
        user.unsubscribe(season)
    await user_repo.commit()  

    # refresh user's subs
    user = await user_repo.get_user_by_id(callback.message.chat.id)

    if user:
        subscriptions = user.animelist
    else:
        subscriptions = list()

    buttons = create_subscribed_season_buttons(subscriptions)
    builder = InlineKeyboardBuilder(buttons)

    await callback.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', show_alert=True)

    if buttons:
        await callback.message.edit_reply_markup(callback.inline_message_id, reply_markup=builder.as_markup())
    else:
        await callback.message.edit_text('–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—É—Å—Ç')


# SUBSCRIBE FLOW


class Subscribe(StatesGroup):
    enter_title = State()
    choosing_season = State()
    choosing_voiceover_studio = State()


@router.message(F.text.lower() == '–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–∏–º–µ')
async def subsribe_flow_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–µ–π—á–∞—Å –≤—ã—Ö–æ–¥–∏—Ç')
    await state.set_state(Subscribe.enter_title)


@router.message(Subscribe.enter_title)
@inject
async def subsribe_query_handler(message: Message, 
                                 state: FSMContext,
                                 user_repo: AnimeRepository = Provide[Container.anime_repository]
) -> None:
    ''' –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∏–º–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '''

    seasons = await user_repo.get_seasons_by_query(message.text)
    buttons = [
        [InlineKeyboardButton(text=season.title_ru, callback_data=str(season.id))]
        for season in seasons if season
    ]
    builder = InlineKeyboardBuilder(buttons)
    if buttons:
        await message.answer(f'–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{message.text}":', reply_markup=builder.as_markup())
        await state.set_state(Subscribe.choosing_season)
    else:
        await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É')


@router.callback_query(Subscribe.choosing_season)
@inject
async def any_message_handler(
    callback: CallbackQuery,
    state: FSMContext,
    anime_repo: AnimeRepository = Provide[Container.anime_repository]
) -> None:
    ''' –≤—ã–≤–æ–¥–∏—Ç –∞–Ω–∏–º–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–∑–≤—É—á–µ–∫ '''
    
    season = await anime_repo.get_season_by_id(int(callback.data))
    dubbed_seasons = await anime_repo.get_dubbed_seasons_by_season_id(int(callback.data))

    buttons = []

    for s in dubbed_seasons:
        if s.studio_name == '#subscribe_on_first':
            buttons.append(
                [InlineKeyboardButton(text='‚úÖ –ù–∞ –≤—ã—Ö–æ–¥ –ø–µ—Ä–≤–æ–π', callback_data=str(s.id))]
            )
        else:
            buttons.append(
                [InlineKeyboardButton(text=s.studio_name, callback_data=str(s.id))]
            )

    builder = InlineKeyboardBuilder(buttons)
    builder.adjust(2)

    if dubbed_seasons:
        await callback.message.answer_photo(
            photo=URLInputFile(season.cover),
            caption=season.title_ru,
            reply_markup=builder.as_markup()
        )
        await state.set_state(Subscribe.choosing_voiceover_studio)
    else:
        await callback.message.answer('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–ø–∏—Å–æ–∫ –æ–∑–≤—É—á–µ–∫ –ø—É—Å—Ç :(\n'
                                      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º - @maisiq')


@router.callback_query(Subscribe.choosing_voiceover_studio)
@inject
async def add_subscribiton_handler(
    callback: CallbackQuery,  
    user_repo: UsersRepository = Provide[Container.user_repository],
    anime_repo: AnimeRepository = Provide[Container.anime_repository],
) -> None:
 
    season = await anime_repo.get_dubbed_season_by_id(int(callback.data))
    user = await user_repo.get_user_by_id(callback.message.chat.id)

    if user.is_subsribed(season):
        await callback.answer('‚ùóÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã', show_alert=True)
    else:
        user.subscribe(season)
        try:
            await user_repo.commit()
            await callback.answer('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞', show_alert=True)
        except SQLAlchemyError:
            await callback.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ', show_alert=True)

# should be last handler

@router.message()
@inject
async def command_start_handler(
    message: Message, 
) -> None:
    kb = [
        [KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–∏–º–µ")],
        [KeyboardButton(text="–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"), KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]
    ]
    await message.answer(
        '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é', 
        reply_markup=ReplyKeyboardBuilder(kb).as_markup(resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é")
    ) 